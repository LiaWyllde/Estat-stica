# -*- coding: utf-8 -*-
"""ResumoDeEstatistica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14UfNcebukspEw3C1X8tbiDcYtign09ru

# **Imports de bibliotecas**

## Imports Essenciais
"""

import numpy as np
import pandas as pd

'''
- as -> traz a biblioteca com um pseudónimo;
- numpy -> Tratamento de dados;
- pandas -> Tratamento de listas.
'''

from google.colab import drive
drive.mount('/content/drive')

'''
- drive -> conexão com o Google Drive.
- .mount -> conecta o google drive ao colab como um diretório.
'''

"""## Imports Condicionais"""

# Criadores de gráficos:
import plotly.express as px

import matplotlib.pyplot as plt
from matplotlib import colors

import seaborn as sns

# Listas e arrays:
from collections import Counter

# Ocultar os warnings:
import warnings

"""# Utilização de dados

## Receber dados

### colocando em variável
"""

dados = pd.read_csv('', sep='', encoding='')
# Necessita da biblioteca pandas

'''
- pd.read_csv() -> lê o arquivo csv com os parâmetros sendo:
  - 1º local do arquivo
  - 2º como vai ser separado
  - 3º como vai ser lido, UTF-8 ou iso-8859-1
'''

"""## Tratamento de dados

### Exibição de informações
"""

dados.head(0)

'''
- .head() -> mostra x linhas do arquivo, do início ao fim, com parâmetro:
  - quantidade de linhas
'''

dados.tail(0)

'''
- .tail() -> mostra x linhas do arquivo, do fim ao início ,com parâmetro:
  - quantidade de linhas
'''

dados.shape

'''
- .shape -> mostra a quantidade de linhas e colunas do arquivo
'''

"""### Tabela"""

dadosSemColuna = dados.drop(columns=[''])

'''
- .drop() -> remove uma coluna do arquivo, com parâmetro:
  - nome da coluna
'''

dadosRenomeado = dados.rename(columns={'' : ''}, inplace=True)

'''
- .rename() -> renomeia uma coluna do arquivo, com parâmetro:
  - nome da coluna antiga
  - nome da coluna nova
  - se o arquivo novo vai ser "oficial" e substituir o antigo (True/False)
'''

dados.dtypes

'''
- .dtypes -> mostra o tipo de dados de cada coluna do arquivo
'''

dados.isnull().sum()

'''
- .isnull() -> mostra a quantidade de valores nulos de cada coluna
- .sum() -> soma a quantidade de valores nulos de cada coluna
'''

dadosRenomeado[''] = dadosRenomeado[''].apply(lambda x: x.replace('',''))

'''
- função para substituir algo por outro em uma lista.
'''

dados[''] = dados[''].astype()

'''
- .astype() -> converte o tipo de dado de uma coluna
'''

# conversão de colunas em datas:

# transformar coluna datas em string
dados['datas'] = dados['datas'].astype(str)

# Adiciona 0 para as datas:
for i in range(0,7):
  valor = dados.loc[i, 'datas']
  dados.loc[i, 'datas'] = '0' + valor

# Incluindo barras nas datas
dados['datas'] = dados['datas'].apply(lambda x: x[:2]+'/'+x[2:4]+'/'+x[4:])

#transformar a coluna datas em datetime
dados['datas'] = pd.to_datetime(dados['datas'], format='%d/%m/%Y')

"""### Cálculos"""

dados[''].mean()
# Calcula a média, parâmetro = coluna

dados.median()
# Calcula a mediana

dados[''].mode()
# Calcula a moda, parâmetro = coluna

dados[''].var()
# Variância amostral, parâmetro = coluna

dados.nomeColuna.var(ddof=0)
# Variância Populacional

dados.nomeColuna.std()
# Desvio padrão amostral

np.sqrt(dados[''].var(ddof=0))
# Desvio padrão populacional, precisa da biblioteca numpy

(dados.nomeColuna - dados.nomeColuna.mean()).abs()
# Desvio absoluto

dados[''].min()
# Mínimo

dados[''].max()
# Máximo

dados[''].quantile(q=0.25)
# Quartil (0.25, 0.5, 0.75, 0.90)

# Frequência absoluta
freq_absoluta = Counter()

# Transformando em dataframe
tabela = pd.DataFrame.from_dict(freq_absoluta, orient='index')

# Colocar em ordem crescente
tabela = tabela.sort_index(ascending=True)

# Colocar os indíces reais
tabela.reset_index(inplace=True)

# Renomear colunas
tabela = tabela.rename(columns={'index': 'valor'})
tabela = tabela.rename(columns={0: 'freq_abs'})

# Incluir frequência relativa na tabela
tabela['freq_rel'] = tabela['freq_abs'] / tabela['freq_abs'].sum()

# Frequência percentual relativa
tabela['freq_rel_perc'] = tabela['freq_rel']*100

# Incluir frequência acumulada
tabela['freq_acum']= tabela['freq_abs'].cumsum()

"""### Gráficos

#### Histograma
"""

# Matplotlib
plt.hist(dados.compra, bins = 6, color='red')
plt.title('Histograma')
plt.xlabel ('Compra')
plt.ylabel ('Frequência')
plt.show()

# Seaborn
sns.histplot(dados['venda'], bins=5, color="red", kde=True);

# Plotly
grafico =  px.histogram (dados,  x = "compra", nbins=10)
grafico.update_layout(width=500,height=400,title_text='Histograma')
grafico.show()

"""#### Bloxplot e Outliers"""

# USando Plotly
grafico = px.box(dados, y="altura")
grafico.show()

"""### Salvar alterações"""

dados.to_csv('.csv', sep='', encoding='', index = False)

dados.to_csv('/content/drive/.csv', sep='', encoding='', index = False)